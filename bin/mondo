#!/bin/bash

NAME="mondo"
VERSION="0.023"
AUTHOR="budRich"
CONTACT='robstenklippa@gmail.com'
CREATED="2018-01-25"
UPDATED="2018-04-02"

MONDO_DIR="$HOME/.config/mondo"
filex=""
lastvar=""

main(){

  eval lastvar="\${$#}"

  while getopts :vhn:g:a:l:t:f option; do

    case "${option}" in

      n) newmondo "${OPTARG}" ;;
      t) tmpmondo "${OPTARG}" ;;
      g) genmondo "${OPTARG}" ;;
      a) appmondo "${OPTARG}" ;;
      l) lstmondo "${OPTARG}" ;;
      f) force=1              ;;

      v) printf '%s\n' \
           "$NAME - version: $VERSION" \
           "updated: $UPDATED by $AUTHOR"
         exit ;;
      h|*) printinfo && exit ;;

    esac

  done

}

genxcolors(){
  local theme="$1"

  awk '
    $1=="#define" && $2!~/font|theme/{\

      if($2~/^base[0-3]$/)
        abass[$2]=$3

      else if($2~/^base0[0-3]$/)
        abasd[$2]=$3

      else
        acols[$2]=$3

    }

    END{

      # remove fg/bg from arrays and note heritage

      for(k in abass){

        if(abass[k]==acols["fg"]){
          delete abass[k]
          fga="s"
          break
        }

        if(abass[k]==acols["bg"]){
          delete abass[k]
          bga="s"
          break
        }

      }

      for(k in abasd){

        if(abasd[k]==acols["fg"]){
          delete abasd[k]
          fga="d"
          break
        }

        if(abasd[k]==acols["bg"]){
          delete abasd[k]
          bga="d"
          break
        }

      }

      nbg="13,14,15"
      nfg="8,10,11"

      for(k in abasd){

        if(fga=="d"){
          onfg=nfg
          sub("[,].*","",nfg)
          afg[nfg]=k
          sub("[0-9]*[,]","",onfg)
          nfg=onfg
        }

        if(bga=="d"){
          onbg=nbg
          sub("[,].*","",nbg)
          abg[nbg]=k
          sub("[0-9]*[,]","",onbg)
          nbg=onbg
        }

      }

      for(k in abass){

        if(fga=="s"){
          onfg=nfg
          sub("[,].*","",nfg)
          afg[nfg]=k
          sub("[0-9]*[,]","",onfg)
          nfg=onfg
        }

        if(bga=="s"){
          onbg=nbg
          sub("[,].*","",nbg)
          abg[nbg]=k
          sub("[0-9]*[,]","",onbg)
          nbg=onbg
        }

      }

      print "*.color0:                 bg"
      print "*.color8:                 base0"
      print "*.color1:                 red"
      print "*.color9:                 ora"
      print "*.color2:                 grn"
      print "*.color10:                base1"
      print "*.color3:                 ylw"
      print "*.color11:                base3"
      print "*.color4:                 blu"
      print "*.color12:                vio"
      print "*.color5:                 mag"
      print "*.color13:                base01"
      print "*.color6:                 cyn"
      print "*.color14:                base02"
      print "*.color7:                 fg"
      print "*.color15:                base03"

    }
  ' "$theme"
}

tmpmondo(){

  local src="$1"
  local nmn="${src##*/}"
  nmn=${nmn//'.'/}
  local dir="$MONDO_DIR/generator/$nmn"

  [[ -f "$lastvar" ]] && filex="$lastvar"

  if [[ ! -d "$dir" ]]; then

    mkdir -p "$dir"

    newappcont "$dir/mondo-apply"
    newgencont "$dir/mondo-generate"
    newcnfcont "$dir/mondo-settings"

  fi


  [[ -n "$filex" ]] \
    && cp -f "$lastvar" "$dir/mondo-template" \
    || touch "$dir/mondo-template"

  echo "$dir/mondo-template"

}

lstmondo(){

  local type="$1"

  case "$type" in

    icons   )

      for f in /usr/share/icons/*; do

        [[ -d "$f/cursors" ]] && continue
        [[ ${f##*/} = default ]] && continue
        echo "${f##*/}"
      done

      for f in $HOME/.icons/*; do

        [[ -d "$f/cursors" ]] && continue
        [[ ${f##*/} = default ]] && continue
        echo "${f##*/}"
      done

    ;;

    gtk    )

      for f in /usr/share/themes/*; do
        [[ -d "$f/gtk-2.0" ]] || continue
        echo "${f##*/}"
      done

      for f in $HOME/.themes/*; do
        [[ -d "$f/gtk-2.0" ]] || continue
        echo "${f##*/}"
      done

    ;;

    themes  )

      for f in $MONDO_DIR/themes/*; do
        echo "${f##*/}"
      done

    ;;

    generators  )

      for f in $MONDO_DIR/generators/*; do
        echo "${f##*/}"
      done

    ;;

    resources  )

      xrdb -query | awk '
        $1~/mondo/{
          gsub("mondo.|[:]", "", $1)
          space=""
          for(i=20;i>length($1);i--)
            space=space " "
          print $1 space "\t" $2
        }
      '
    ;;

    cursors )

      for f in /usr/share/icons/*; do

        [[ -d "$f/cursors" ]] || continue
        [[ ${f##*/} = default ]] && continue
        echo "${f##*/}"
      done

      for f in $HOME/.icons/*; do

        [[ -d "$f/cursors" ]] || continue
        [[ ${f##*/} = default ]] && continue
        echo "${f##*/}"
      done

    ;;

  esac

}

appmondo(){

  local nmn src xrorgl xfile

  nmn="${1##*/}"
  src="$MONDO_DIR/themes/$nmn"

  [[ -f "$src" ]] || {
    echo "Theme $src doesn't exist."
    exit ; }

  [[ -f "$MONDO_DIR/pre-apply" ]] \
      && "$MONDO_DIR/pre-apply"

  rm -f "$MONDO_DIR/mondo-theme"

  cat "$src" "$MONDO_DIR/mondo-init" <(genxcolors "$src") \
    > "$MONDO_DIR/mondo-theme"


  xfile=$(readlink -f "$HOME/.Xdefaults")
  xrorgl="$(grep 'mondo-theme' $xfile)"

  if [[ -z "$xrorgl" ]]; then

    echo "#include \"${MONDO_DIR/$HOME\/}/mondo-theme\"" \
      > /tmp/xrestmp

    cat "$HOME/.Xdefaults" >> /tmp/xrestmp
    mv -f /tmp/xrestmp "$xfile"

  fi

  xrdb -load "$HOME/.Xdefaults"

  # copy files
  for d in "$MONDO_DIR/generator/"*; do

    [[ ! -d "$d" ]] && continue
    echo "$d"
    format=""
    target=""
    ext=""

    [[ -f "$d/mondo-settings" ]] \
      && . "$d/mondo-settings"

    [[ -n $ext ]] \
      && src="$d/${nmn}.$ext" \
      || src="$d/$nmn"

    if [[ -n $target ]] && [[ -f "$src" ]]; then
      [[ ${target} =~ ${HOME} ]] \
        && cp -f "$src" "$target" \
        || gksudo cp "$src" "$target"
    fi

    [[ -f "$d/mondo-apply" ]] \
      && "$d/mondo-apply" "$src"

  done

  [[ -f "$MONDO_DIR/post-apply" ]] \
      && "$MONDO_DIR/post-apply"
}

genmondo(){

  local nmn type ext format target

  nmn="${1##*/}"
  src="$MONDO_DIR/themes/$nmn"

  [[ -f "$src" ]] || {
    echo "Theme $src doesn't exist."
    exit ; }

  mv "$MONDO_DIR/mondo-theme" "$MONDO_DIR/mondo-themeBAK"

  cat "$src" "$MONDO_DIR/mondo-init" <(genxcolors "$src") \
    > "$MONDO_DIR/mondo-theme"

  xrorgl="$(grep 'mondo-theme' $HOME/.Xdefaults)"


  if [[ -z "$xrorgl" ]]; then

    echo "#include \"${MONDO_DIR/$HOME\/}/mondo-theme\"" \
      > /tmp/xrestmp

    cat "$HOME/.Xdefaults" >> /tmp/xrestmp
    mv -f /tmp/xrestmp "$HOME/.Xdefaults"

  fi

  xrdb -load "$HOME/.Xdefaults"

  hexvars="$(xrdb -query | awk '

    $1~/mondo/{
      gsub("mondo.|[:]","",$1)
      var=$1
      $1=""
      sub(" ","",$0)
      printf var "=" $0 ":"
    }

    $1~/color[0-9]*:/{
      gsub("[*].|[:]","",$1)
      var=$1
      $1=""
      sub(" ","",$0)
      printf var "=" $0 ":"
    }

  ')"

  rgbvars="$(xrdb -query | awk '
    $1~/mondo/{

      gsub("mondo.|[:]","",$1)
      var=$1
      $1=""

      if(var~/colors/){

        sub("#","",$2)
        "color-converter.sh " $2 | getline cc
        val=cc
        gsub(".*[(]|[)]| ","",val)
        printf var "=" val ":"

      } else {

        sub(" ","",$0)
        printf var "=" $0 ":"

      }

    }
  ')"

  mv -f "$MONDO_DIR/mondo-themeBAK" "$MONDO_DIR/mondo-theme"

  xrdb -load "$HOME/.Xdefaults"

  for f in "$MONDO_DIR/generator/"*; do

    type=${f##*/}

    format=""
    target=""
    ext=""

    [[ -f "$MONDO_DIR/generator/$type/mondo-settings" ]] \
      && . "$MONDO_DIR/generator/$type/mondo-settings"

    [[ -n $ext ]] && ext=".${ext}"

    trg="$MONDO_DIR/generator/$type/${nmn}${ext}"

    [[ $format =~ RGB|rgb ]] \
      && usevars=${rgbvars} \
      || usevars=${hexvars}
    # usevars=${hexvars}
    template="$MONDO_DIR/generator/$type/mondo-template"

    [[ $force = 1 ]] && [[ -f "$trg" ]] \
      && rm "$trg"

    if [[ ! -f "$trg" ]] && [[ -f "$template" ]]; then

      awk -v thmnmn="$nmn" -v fmondo="${usevars}" '

        BEGIN{
          split(fmondo,tmondo,":")
          for(k in tmondo){
            val=substr(tmondo[k],index(tmondo[k], "=")+1)
            sub("=.*","",tmondo[k])
            if(val!="")
              amondo[tmondo[k]]=val
          }
        }

        {
          sub("%%theme%%",thmnmn,$0)

          for(m in amondo)
            gsub("%%"m"%%",amondo[m],$0)

          print $0

        }' "$template" > "$trg"

      genscript="$MONDO_DIR/generator/$type/mondo-generate"

      [[ -f "$genscript" ]] && "$genscript" "$trg"

    fi

  done
}

newmondo(){

  src="$lastvar"
  trg="$MONDO_DIR/themes/${1##*/}"

  if [[ ! -d "$MONDO_DIR" ]]; then

    mkdir -p "$MONDO_DIR/themes"
    mkdir -p "$MONDO_DIR/generator"

    newpostapp "$MONDO_DIR/post-apply"
    newpreapp  "$MONDO_DIR/pre-apply"

  fi

  declare -A aclr

  aclr[base02]=#000000
  aclr[base03]=#333333
  aclr[red]=#FF0000
  aclr[ora]=#AA0000
  aclr[grn]=#00FF00
  aclr[base01]=#00AA00
  aclr[ylw]=#FFF000
  aclr[base00]=#AAA000
  aclr[blu]=#0000FF
  aclr[base0]=#0000AA
  aclr[mag]=#FF00FF
  aclr[vio]=#AA00AA
  aclr[cyn]=#00FFFF
  aclr[base1]=#00AAAA
  aclr[base2]=#FFFFFF
  aclr[base3]=#AAAAAA
  aclr[fg]=#FFFFFF
  aclr[bg]=#000000

  eval "$(xrdb -query | awk '
    $1~"color0:"      {print "aclr[base00]=" $2}
    $1~"color8:"      {print "aclr[base3]=" $2}
    $1~"color1:"      {print "aclr[red]="    $2}
    $1~"color9:"      {print "aclr[ora]="    $2}
    $1~"color2:"      {print "aclr[grn]="    $2}
    $1~"color10:"     {print "aclr[base1]=" $2}
    $1~"color3:"      {print "aclr[ylw]="    $2}
    $1~"color11:"     {print "aclr[base0]=" $2}
    $1~"color4:"      {print "aclr[blu]="    $2}
    $1~"color12:"     {print "aclr[vio]="  $2}
    $1~"color5:"      {print "aclr[mag]="    $2}
    $1~"color13:"     {print "aclr[base01]="    $2}
    $1~"color6:"      {print "aclr[cyn]="    $2}
    $1~"color14:"     {print "aclr[base02]="  $2}
    $1~"color7:"      {print "aclr[base2]="  $2}
    $1~"color15:"     {print "aclr[base03]="  $2}
    $1~"foreground:"  {print "aclr[fg]="     $2}
    $1~"background:"  {print "aclr[bg]="     $2}
  ')"

  [[ -f "$src" ]] && {
    eval "$(awk '
      $1~"color0:"      {print "aclr[base00]=" $2}
      $1~"color8:"      {print "aclr[base3]=" $2}
      $1~"color1:"      {print "aclr[red]="    $2}
      $1~"color9:"      {print "aclr[ora]="    $2}
      $1~"color2:"      {print "aclr[grn]="    $2}
      $1~"color10:"     {print "aclr[base1]=" $2}
      $1~"color3:"      {print "aclr[ylw]="    $2}
      $1~"color11:"     {print "aclr[base0]=" $2}
      $1~"color4:"      {print "aclr[blu]="    $2}
      $1~"color12:"     {print "aclr[vio]="  $2}
      $1~"color5:"      {print "aclr[mag]="    $2}
      $1~"color13:"     {print "aclr[base01]="    $2}
      $1~"color6:"      {print "aclr[cyn]="    $2}
      $1~"color14:"     {print "aclr[base02]="  $2}
      $1~"color7:"      {print "aclr[base2]="  $2}
      $1~"color15:"     {print "aclr[base03]="  $2}
      $1~"foreground:"  {print "aclr[fg]="     $2}
      $1~"background:"  {print "aclr[bg]="     $2}
    ' "$src")"
  }

  for k in fg bg X base00 base01 base02 base03 \
                   base0 base1 base2 base3 X \
                   red ora grn ylw blu mag vio cyn
  do
    [[ $k = X ]] && echo  >> "$trg" && continue
    echo "#define $k ${aclr[$k]}" >> "$trg"
  done

  [[ ! -f "$MONDO_DIR/mondo-base" ]] \
    && newbase "$MONDO_DIR/mondo-base"

  [[ ! -f "$MONDO_DIR/mondo-init" ]] \
    && newinit "$MONDO_DIR/mondo-init"

  echo >> "$trg"
  cat "$MONDO_DIR/mondo-base" >> "$trg"

  echo "$trg"
}

newinit(){
local trg="$MONDO_DIR/mondo-init"

echo "mondo.terminal.fontface1: terminalfontface1
mondo.terminal.fontface2: terminalfontface2
mondo.terminal.fontsize1: terminalfontsize1
mondo.terminal.fontsize2: terminalfontsize2

mondo.colors.yellow:      ylw
mondo.colors.orange:      ora
mondo.colors.redish:      red
mondo.colors.magenta:     mag
mondo.colors.violet:      vio
mondo.colors.blue:        blu
mondo.colors.cyan:        cyn
mondo.colors.green:       grn

mondo.gui.cursor:         cursortheme
mondo.gui.icon:           icontheme
mondo.gui.gtk:            gtktheme

mondo.gui.fontface1:      guifontface1
mondo.gui.fontface2:      guifontface2
mondo.gui.fontsize1:      guifontsize1
mondo.gui.fontsize2:      guifontsize2

*.foreground:             fg
*.background:             bg
*.cursorColor:            fg
*.cursorColor2:           bg
*.border:                 bg
" > "$trg"
}

newbase(){
local trg="$MONDO_DIR/mondo-base"

echo "mondo.colors.fg1:         fg
mondo.colors.fg2:         base01
mondo.colors.bg1:         bg
mondo.colors.bg2:         base03

mondo.colors.dark1:       base03
mondo.colors.light1:      base1

mondo.colors.act1:        blu
mondo.colors.act2:        base3
mondo.colors.act3:        base01

mondo.colors.ina1:        cyn
mondo.colors.ina2:        fg
mondo.colors.ina3:        base01

mondo.colors.sel1:     base01
mondo.colors.sel2:     base03

!! GUI theme
#define cursortheme     $(mondo -l cursors| head -1)
#define icontheme       $(mondo -l icons  | head -1)
#define gtktheme        $(mondo -l gtk    | head -1)

!! Terminal fonts
#define terminalfontface1 monospace
#define terminalfontsize1 12
#define terminalfontface2 monospace
#define terminalfontsize2 18

!! GUI fonts
#define guifontface1      sans
#define guifontsize1      12
#define guifontface2      sans
#define guifontsize2      18
" > "$trg"
}

shebang='#!/bin/bash'

preapp='
# This script is executed before anything else,
# when mondo is executed with the apply option (-a).

# The intension of this script is to let you prepare
# your environment before applying a new theme.

# For instance one might want to kill certain processes
# before applying, since some programs might overwrite
# the new settings with the old.
'

newpreapp(){
  local trg

  trg="${1}"

  echo "$shebang" > "$trg"
  echo "$preapp" >> "$trg"

  chmod +x "$trg"
}

postapp='
# This script is executed AFTER all other applying
# actions and scripts are finished, when mondo is
# executed with the apply option (-a).

# The intension of this script is to let you adjust
# your environment after applying a new theme.

# For instance one might want to reload certain processes
# like windowmanagers and statusbars.
'

newpostapp(){
  local trg

  trg="${1}"

  echo "$shebang" >  "$trg"
  echo "$postapp" >> "$trg"

  chmod +x "$trg"
}

appcont='
# This script is executed every time a theme is applied.
# Each generator can have it'"'"'s own mondo-apply script.

# The default syntax is bash, but by changing the shebang,
# one could use another language (f.i. perl or python).

# $1 is equal to: $MONOD_DIR/generator/TYPE/THEME[.extensions]

# If this script is not needed, this file can safely be removed.
# (removing the file, will improve execution speed)

# this_dir="${1%/*}"
# this_file="${1##*/}"
# this_theme="${this_file%.*}"

# To source the settings file one could use this:
# source "${this_dir}/mondo-settings"
'

newappcont(){
  local trg

  trg="${1}"

  echo "$shebang" >  "$trg"
  echo "$appcont" >> "$trg"

  chmod +x "$trg"
}

gencont='
# This script is executed every time a theme is generated.
# Each generator can have it'"'"'s own mondo-generate script.

# The default syntax is bash, but by changing the shebang,
# one could use another language (f.i. perl or python).

# $1 is equal to: $MONDO_DIR/generator/TYPE/THEME[.extensions]

# If this script is not needed, this file can safely be removed.
# (removing the file, will improve executioni speed)

# this_dir="${1%/*}"
# this_file="${1##*/}"
# this_theme="${this_file%.*}"

# To source the settings file one could use this:
# source "${this_dir}/mondo-settings"
'

newgencont(){
  local trg

  trg="${1}"

  echo "$shebang" >  "$trg"
  echo "$gencont" >> "$trg"

  chmod +x "$trg"
}

newcnfcont(){
  local trg

  trg="${1}"

  echo "
# The content of this file is sourced by mondo.
# The syntax is bash. But it is not recommended to
# add any script functions other then variable declaration
# in this file.

# If ext is set, it will be appended as an extension
# when files are generated.
ext=\"\"

# The default format is \"hex\". If format is set to
# rgb, colors will be translated to RGB format.
# Example: #FF00FF -> 255,255,255
format=\"hex\"

# target can be an (absolute) file path to where
# the file will be copied when a theme is applied.
" > "$trg"

  if [[ -n $filex ]]; then
    fildir=$(dirname "$filex")
    [[ $fildir = '.' ]] && fildir=$(pwd)
    echo "# target=\"${fildir}/${filex##*/}\"" >> "$trg"
  else
    echo "target=\"\"" >> "$trg"
  fi
}

printinfo(){
  case "$1" in
    m ) printf '%s' "${about}" ;;

    f )
      printf '%s' "${bouthead}"
      printf '%s' "${about}"
      printf '%s' "${boutfoot}"
    ;;

    ''|* )
      printf '%s' "${about}" | awk '
         BEGIN{ind=0}
         $0~/^```/{
           if(ind!="1"){ind="1"}
           else{ind="0"}
           print ""
         }
         $0!~/^```/{
           gsub("[`*]","",$0)
           if(ind=="1"){$0="   " $0}
           print $0
         }
       '
    ;;
  esac
}

bouthead="
${NAME^^} 1 ${CREATED} Linux \"User Manuals\"
=======================================

NAME
----
"

boutfoot="
AUTHOR
------

${AUTHOR} <${CONTACT}>
<https://budrich.github.io>

"

about='
`mondo` - Theme manager and generator

SYNOPSIS
--------
`mondo` `-v`|`-h`
`mondo` `-a` THEME
`mondo` [`-f`] `-g` THEME
`mondo` `-n` *FILE*|NAME [*FILE*]
`mondo` `-t` *FILE*|NAME [*FILE*]

DESCRIPTION
-----------

`mondo` uses `xrdb` to apply colors and other settings
from a theme to templates created by the user. The
themes are `.Xresources` files.

Themes are stored in *MONDO_DIR/themes*. Templates
(*mondo-template*) is one file that makes up a *generator*.
Each generator directory is located in *MONDO_DIR/generator*.

By defining special *mondo* resources in the themes,
the values stored in those resources can be used in
the templates.

Example excerpt from a theme file:
`mondo.colors.yellow: #FFE000`

To use the value when generating a file from a template,
one could use this format:
`YellowSubmarine="%%colors.yellow%%"`

This would result in the following when the theme is generated:
`YellowSubmarine="#FFE000"`

THEMES
------

A new theme is created with the command:
`mondo -n FILE|NAME [FILE]`

If FILE is the only argument the name of the theme will
be the file name. If NAME is the only argument the predefined
variables of the theme will be taken from Xresources. If FILE
contains Xresources colors resources those will be set as predefined
variables. Themes are stored in *MONDO_DIR/themes*

Example of colors resources:
``` text
*foreground:  #e9e9f4
*background:  #282936
*color0:      #282936
*color1:      #ea51b2
*color2:      #ebff87
```

The mandatory content of a theme file is the following
variables (the values can not be empty and needs to be
in hexadecimal format):
``` text
#define fg #73675F
#define bg #ebdbb2

#define base00 #fbf1c7
#define base01 #A69881
#define base02 #ebdbb2
#define base03 #d5c4a1

#define base0 #282828
#define base1 #73675F
#define base2 #504945
#define base3 #3c3836

#define red #9d0006
#define ora #af3a03
#define grn #79740e
#define ylw #b57614
#define blu #076678
#define mag #8f3f71
#define vio #d65d0e
#define cyn #427b58
```

The values of fg and bg must exist as values in the base groups.
They can not exist in the same group. It is strongly suggested
to keep similar colors (foreground/background) in each group.

The xresources colors resources will be auto generated and appended
to the theme file when it is applied (mondo -a THEME). Therefor
the color resources should be removed from `~/.Xresources`.

These resources are managed by `mondo`:
``` text
*.foreground:     fg
*.background:     bg
*.cursorColor:    fg
*.cursorColor2:   bg
*.border:         bg

*.color0:         bg
*.color8:         base0
*.color1:         red
*.color9:         ora
*.color2:         grn
*.color10:        base1
*.color3:         ylw
*.color11:        base3
*.color4:         blu
*.color12:        vio
*.color5:         mag
*.color13:        base01
*.color6:         cyn
*.color14:        base02
*.color7:         fg
*.color15:        base03
```

The two files *mondo-base* and *mondo-init* that is found in
*MONDO_DIR* are also appended to the theme file when a theme
is applied (`mondo -a THEME`). The content of these files are not
mandatory but holds common and more or less static variable
and resource definitions.

GENERATORS
----------
A new generator directory is created with the command:
`mondo -t FILE|NAME [FILE]`

If FILE is the only argument, the name of the generator will
be the file name. If NAME is the only argument a generator without
a template (*mondo-template*) file will get created. If FILE exist,
it will be copied to the generator directory as *mondo-template*.
The path to the file will also be entered as `target` in
*mondo-settings*. The target variable is however commented
out by default.

The command: `mondo -l resources` lists all resources that can
be used in a *mondo-template* file. All valid resources within
double percentage signs (%%class.type%%) will be replaced with
the value of that resource when a theme is generated
(`mondo -[f]g THEME`).

When a generator is activated with an existing theme,
(`mondo -[f]g THEME`) a file is created in the generators
directory, with the same name as the theme. If that file already
exist it will be kept untouched if not the force (`-f`) option
is set, then a new file will be generated.

In the file, `mondo-settings`, it is possible to fine
tune the extension, and format (if format is set to *rgb*,
the color will be translated to rgb format) of the generated
file. There is also a setting called `target`, if this is set,
the generated file will be copied (`cp -f`) to path specified
when the theme is applied (`mondo -a THEME`).

To have other actions then copy to target being executed on the
file one can write scripts in the files: *mondo-apply*
(this script will get executed when the theme is applied) and
*mondo-generate* (this will get executed AFTER the file is generated).
These files are autocreated with each generator and are by default
bash scripts, but if shebang is changed another interpreter could
be used (such as perl, python, ruby or zsh).

Similarly the files *pre-apply* and *post-apply* in *MONDO_DIR* are
executed before and/or after a theme is applied and before and/or
after any generator is invoked.

The only actions that is taken without any settings done and that
is mandatory when a theme is applied (`mondo -a THEME`) is the theme
being included in *~/.Xresources* and the command
`xrdb -load ~/.Xresources` is executed.

OPTIONS
-------

`-v`
  Show version and exit.

`-h`
  Show help and exit.

`-a` THEME
  Apply THEME. The following will happen:

    1. The file (script) MONDO_DIR/pre-apply will
       get executed.

    2. MONDO_DIR/mondo-theme will get created.

    3. MONDO_DIR/mondo-theme will get included in
       ~/.Xresources

    4. The command `xrdb -load ~/.Xresources` will
       get executed.

    5. Generators will get applied and the file(s)
       mondo-apply will get executed.

    6. The file (script) MONDO_DIR/post-apply will
       get executed.


[`-f`] `-g` THEME
  Generate THEME. The following will happen:

  1. A file named THEME will be generated based on
     mondo-template in each generator directory if
     it doesn'"'"'t already exist. If `-f` flag is set
     it will always generate the file, even if it
     already exist.

  2. If a file was generated the file (script)
     *mondo-generate* will get executed.


`-n` *FILE*|NAME [*FILE*]
  Create a new theme, see description above.


`-t` *FILE*|NAME [*FILE*]
    Create a new generator, see description above.


FILES
-----

*MONDO_DIR/mondo-theme*
  This file will get generated, when a theme is
  generated (`-g`) or applied (`-a`). The content
  of this file is the selected
  THEME + *MONDO_DIR/mondo-base* + *MONDO_DIR/mondo-init*
  and some auto generated resources. This is file
  will get included in *~/.Xresources*.

*MONDO_DIR/mondo-base*
  The content of this file will get appended to
  mondo-theme, when a theme is generated (`-g`) or
  applied (`-a`).

*MONDO_DIR/mondo-init*
  The content of this file will get appended to
  mondo-theme, when a theme is generated (`-g`) or
  applied (`-a`).

*MONDO_DIR/pre-apply*
  This file get executed BEFORE any other action
  when a THEME is applied (`-a`).

*MONDO_DIR/post-apply*
  This file get executed AFTER all other actions are
  executed when a THEME is applied (`-a`).

*mondo-apply*
  This file is auto generated with each generator.
  It will get executed when a THEME is applied (`-a`).

*mondo-generate*
  This file is auto generated with each generator.
  It will get executed when a THEME is generated (`-g`).

*mondo-settings*
  This file is auto generated with each generator.
  It contains settings that will affect the generator.

*mondo-template*
  This file is auto generated with each generator.
  This is the template file for the generator.

ENVIRONMENT
-----------

`MdefaultssThe path to a directory where all mondo files are
  stored. Defaults to *~/.config/mondo*
'

if [ "$1" = "md" ]; then
  printinfo m
  exit
elif [ "$1" = "man" ]; then
  printinfo f
  exit
else
  main "${@}"
fi
